##################################################
# file: yc_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     C:\Python27\Scripts\wsdl2py-script.py http://114.80.200.100:8081/axis2/services/yc?wsdl
# 
##################################################

from yc_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class ycLocator:
    ycHttpSoap11Endpoint_address = "http://114.80.200.100:8081/axis2/services/yc.ycHttpSoap11Endpoint/"
    def getycHttpSoap11EndpointAddress(self):
        return ycLocator.ycHttpSoap11Endpoint_address
    def getycHttpSoap11Endpoint(self, url=None, **kw):
        return ycSoap11BindingSOAP(url or ycLocator.ycHttpSoap11Endpoint_address, **kw)

# Methods
class ycSoap11BindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getStatusByTime
    def getStatusByTime(self, request, **kw):
        if isinstance(request, getStatusByTimeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:getStatusByTime", **kw)
        # no output wsaction
        response = self.binding.Receive(getStatusByTimeResponse.typecode)
        return response

    # op: main
    def main(self, request, **kw):
        if isinstance(request, mainRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:main", **kw)
        #check for soap, assume soap:fault
        if self.binding.IsSOAP(): self.binding.Receive(None, **kw)

    # op: getStatusById
    def getStatusById(self, request, **kw):
        if isinstance(request, getStatusByIdRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:getStatusById", **kw)
        # no output wsaction
        response = self.binding.Receive(getStatusByIdResponse.typecode)
        return response

    # op: sendsms
    def sendsms(self, request, **kw):
        if isinstance(request, sendsmsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:sendsms", **kw)
        # no output wsaction
        response = self.binding.Receive(sendsmsResponse.typecode)
        return response

    # op: checkBalance
    def checkBalance(self, request, **kw):
        if isinstance(request, checkBalanceRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:checkBalance", **kw)
        # no output wsaction
        response = self.binding.Receive(checkBalanceResponse.typecode)
        return response

    # op: getReplyByTime
    def getReplyByTime(self, request, **kw):
        if isinstance(request, getReplyByTimeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:getReplyByTime", **kw)
        # no output wsaction
        response = self.binding.Receive(getReplyByTimeResponse.typecode)
        return response

getStatusByTimeRequest = GED("http://yc", "getStatusByTime").pyclass

getStatusByTimeResponse = GED("http://yc", "getStatusByTimeResponse").pyclass

mainRequest = GED("http://yc", "main").pyclass

getStatusByIdRequest = GED("http://yc", "getStatusById").pyclass

getStatusByIdResponse = GED("http://yc", "getStatusByIdResponse").pyclass

sendsmsRequest = GED("http://yc", "sendsms").pyclass

sendsmsResponse = GED("http://yc", "sendsmsResponse").pyclass

checkBalanceRequest = GED("http://yc", "checkBalance").pyclass

checkBalanceResponse = GED("http://yc", "checkBalanceResponse").pyclass

getReplyByTimeRequest = GED("http://yc", "getReplyByTime").pyclass

getReplyByTimeResponse = GED("http://yc", "getReplyByTimeResponse").pyclass
