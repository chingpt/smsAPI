##################################################
# file: yc_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    C:\Python27\Scripts\wsdl2py-script.py http://114.80.200.100:8081/axis2/services/yc?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://yc/xsd
##############################

class ns2:
    targetNamespace = "http://yc/xsd"

    class SendRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://yc/xsd"
        type = (schema, "SendRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SendRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ext"), aname="_ext", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"send_time"), aname="_send_time", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"target"), aname="_target", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ext = None
                    self._message = None
                    self._send_time = None
                    self._target = None
                    return
            Holder.__name__ = "SendRequest_Holder"
            self.pyclass = Holder

    class Response_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://yc/xsd"
        type = (schema, "Response")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Response_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._result = None
                    return
            Holder.__name__ = "Response_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://yc/xsd)

##############################
# targetNamespace
# http://sql.java/xsd
##############################

class ns0:
    targetNamespace = "http://sql.java/xsd"

    class SQLException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://sql.java/xsd"
        type = (schema, "SQLException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SQLException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"SQLState"), aname="_SQLState", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"errorCode"), aname="_errorCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://sql.java/xsd","SQLException",lazy=False)(pname=(ns,"nextException"), aname="_nextException", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SQLState = None
                    self._errorCode = None
                    self._nextException = None
                    return
            Holder.__name__ = "SQLException_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://sql.java/xsd)

##############################
# targetNamespace
# http://yc
##############################

class ns1:
    targetNamespace = "http://yc"

    class ycNamingException_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ycNamingException"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.ycNamingException_Dec.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"NamingException"), aname="_NamingException", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'ycNamingException')
            kw["aname"] = "_ycNamingException"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._NamingException = None
                    return
            Holder.__name__ = "ycNamingException_Holder"
            self.pyclass = Holder

    class ycSQLException_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ycSQLException"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.ycSQLException_Dec.schema
            TClist = [GTD("http://sql.java/xsd","SQLException",lazy=False)(pname=(ns,"SQLException"), aname="_SQLException", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'ycSQLException')
            kw["aname"] = "_ycSQLException"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SQLException = None
                    return
            Holder.__name__ = "ycSQLException_Holder"
            self.pyclass = Holder

    class sendsms_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendsms"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.sendsms_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://yc/xsd","SendRequest",lazy=False)(pname=(ns,"_SendRequset"), aname="__SendRequset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'sendsms')
            kw["aname"] = "_sendsms"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self.__SendRequset = None
                    return
            Holder.__name__ = "sendsms_Holder"
            self.pyclass = Holder

    class sendsmsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendsmsResponse"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.sendsmsResponse_Dec.schema
            TClist = [GTD("http://yc/xsd","Response",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'sendsmsResponse')
            kw["aname"] = "_sendsmsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "sendsmsResponse_Holder"
            self.pyclass = Holder

    class main_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "main"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.main_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"args"), aname="_args", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'main')
            kw["aname"] = "_main"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._args = []
                    return
            Holder.__name__ = "main_Holder"
            self.pyclass = Holder

    class getStatusByTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusByTime"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.getStatusByTime_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNum"), aname="_phoneNum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offset"), aname="_offset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mr"), aname="_mr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'getStatusByTime')
            kw["aname"] = "_getStatusByTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._phoneNum = None
                    self._startTime = None
                    self._endTime = None
                    self._offset = None
                    self._mr = None
                    return
            Holder.__name__ = "getStatusByTime_Holder"
            self.pyclass = Holder

    class getStatusByTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusByTimeResponse"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.getStatusByTimeResponse_Dec.schema
            TClist = [GTD("http://yc/xsd","Response",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'getStatusByTimeResponse')
            kw["aname"] = "_getStatusByTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getStatusByTimeResponse_Holder"
            self.pyclass = Holder

    class getStatusById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusById"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.getStatusById_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offset"), aname="_offset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mr"), aname="_mr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'getStatusById')
            kw["aname"] = "_getStatusById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._id = None
                    self._offset = None
                    self._mr = None
                    return
            Holder.__name__ = "getStatusById_Holder"
            self.pyclass = Holder

    class getStatusByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusByIdResponse"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.getStatusByIdResponse_Dec.schema
            TClist = [GTD("http://yc/xsd","Response",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'getStatusByIdResponse')
            kw["aname"] = "_getStatusByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getStatusByIdResponse_Holder"
            self.pyclass = Holder

    class getReplyByTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReplyByTime"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.getReplyByTime_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNum"), aname="_phoneNum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"extNum"), aname="_extNum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offset"), aname="_offset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mr"), aname="_mr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'getReplyByTime')
            kw["aname"] = "_getReplyByTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._phoneNum = None
                    self._extNum = None
                    self._startTime = None
                    self._endTime = None
                    self._offset = None
                    self._mr = None
                    return
            Holder.__name__ = "getReplyByTime_Holder"
            self.pyclass = Holder

    class getReplyByTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReplyByTimeResponse"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.getReplyByTimeResponse_Dec.schema
            TClist = [GTD("http://yc/xsd","Response",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'getReplyByTimeResponse')
            kw["aname"] = "_getReplyByTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getReplyByTimeResponse_Holder"
            self.pyclass = Holder

    class checkBalance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkBalance"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.checkBalance_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'checkBalance')
            kw["aname"] = "_checkBalance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "checkBalance_Holder"
            self.pyclass = Holder

    class checkBalanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkBalanceResponse"
        schema = "http://yc"
        def __init__(self, **kw):
            ns = ns1.checkBalanceResponse_Dec.schema
            TClist = [GTD("http://yc/xsd","Response",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yc', u'checkBalanceResponse')
            kw["aname"] = "_checkBalanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "checkBalanceResponse_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://yc)
