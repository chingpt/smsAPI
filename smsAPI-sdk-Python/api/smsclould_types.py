##################################################
# file: smsclould_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    C:\Python27\Scripts\wsdl2py-script.py -a http://114.80.200.100:8081/axis2/services/smsclould?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://yupsms.com
##############################

class ns0:
    targetNamespace = "http://yupsms.com"

    class sendsms_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendsms"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.sendsms_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"target"), aname="_target", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ext"), aname="_ext", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sendtime"), aname="_sendtime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'sendsms')
            kw["aname"] = "_sendsms"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._target = None
                    self._message = None
                    self._ext = None
                    self._sendtime = None
                    return
            Holder.__name__ = "sendsms_Holder"
            self.pyclass = Holder

    class sendsmsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "sendsmsResponse"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.sendsmsResponse_Dec.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'sendsmsResponse')
            kw["aname"] = "_sendsmsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "sendsmsResponse_Holder"
            self.pyclass = Holder

    class getStatusByTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusByTime"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.getStatusByTime_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNum"), aname="_phoneNum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offset"), aname="_offset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mr"), aname="_mr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'getStatusByTime')
            kw["aname"] = "_getStatusByTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._phoneNum = None
                    self._startTime = None
                    self._endTime = None
                    self._offset = None
                    self._mr = None
                    return
            Holder.__name__ = "getStatusByTime_Holder"
            self.pyclass = Holder

    class getStatusByTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusByTimeResponse"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.getStatusByTimeResponse_Dec.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'getStatusByTimeResponse')
            kw["aname"] = "_getStatusByTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getStatusByTimeResponse_Holder"
            self.pyclass = Holder

    class getStatusById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusById"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.getStatusById_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offset"), aname="_offset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mr"), aname="_mr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'getStatusById')
            kw["aname"] = "_getStatusById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._id = None
                    self._offset = None
                    self._mr = None
                    return
            Holder.__name__ = "getStatusById_Holder"
            self.pyclass = Holder

    class getStatusByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStatusByIdResponse"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.getStatusByIdResponse_Dec.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'getStatusByIdResponse')
            kw["aname"] = "_getStatusByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getStatusByIdResponse_Holder"
            self.pyclass = Holder

    class getReplyByTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReplyByTime"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.getReplyByTime_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phoneNum"), aname="_phoneNum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"extNum"), aname="_extNum", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startTime"), aname="_startTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endTime"), aname="_endTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offset"), aname="_offset", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mr"), aname="_mr", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'getReplyByTime')
            kw["aname"] = "_getReplyByTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._phoneNum = None
                    self._extNum = None
                    self._startTime = None
                    self._endTime = None
                    self._offset = None
                    self._mr = None
                    return
            Holder.__name__ = "getReplyByTime_Holder"
            self.pyclass = Holder

    class getReplyByTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReplyByTimeResponse"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.getReplyByTimeResponse_Dec.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'getReplyByTimeResponse')
            kw["aname"] = "_getReplyByTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getReplyByTimeResponse_Holder"
            self.pyclass = Holder

    class checkBalance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkBalance"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.checkBalance_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'checkBalance')
            kw["aname"] = "_checkBalance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "checkBalance_Holder"
            self.pyclass = Holder

    class checkBalanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkBalanceResponse"
        schema = "http://yupsms.com"
        def __init__(self, **kw):
            ns = ns0.checkBalanceResponse_Dec.schema
            TClist = [ZSI.TC.AnyType(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://yupsms.com', u'checkBalanceResponse')
            kw["aname"] = "_checkBalanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "checkBalanceResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://yupsms.com)
